# You are given a string s. We want to partition the string into as many 
# parts as possible so that each letter appears in at most one part.
# Note that the partition is done so that after concatenating all the parts
# in order, the resultant string should be s.
# Return a list of integers representing the size of these parts.
# Example 1:
# Input: s = "ababcbacadefegdehijhklij"
# Output: [9,7,8]
# Explanation:
# The partition is "ababcbaca", "defegde", "hijhklij".
# This is a partition so that each letter appears in at most one part.
# A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it 
# splits s into less parts.
# Example 2:
# Input: s = "eccbbbbdec"
# Output: [10]
# Constraints:
# 1 <= s.length <= 500
# s consists of lowercase English letters.

def partition_labels(s):
    intervals = []
    rez = []
    temp = []
    for let in s:
        ind = [i for i, k in enumerate(s) if k == let]
        if [ind[0],ind[-1]] not in intervals:
            intervals.append([ind[0],ind[-1]])
    for i in intervals:
        if not temp:
            temp.append(i[0])
            temp.append(i[1])
        elif temp[1] >= i[0]:
            temp.append(max(temp[1], i[1]))
            temp.pop(1)
        else:
            rez.append(temp[1]-temp[0]+1)
            temp = []
            temp.append(i[0])
            temp.append(i[1])
    rez.append(temp[1]-temp[0]+1)
    return rez




print(partition_labels("ababcbacadefegdehijhklij"))     # [9,7,8]
print(partition_labels("eccbbbbdec"))                   # [10]
print(partition_labels("caedbdedda"))                   # [1,9]
print(partition_labels("eaaaabaaec"))                   # [9,1]
print(partition_labels("aebbedaddc"))                   # [9,1]
