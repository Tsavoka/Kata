# It checks the char in the given string from the front with an iteration,
# in the iteration it does these steps:
# There is a flag and it will be started from 1.
# Check the current char in the iteration index.
# If it is an alphabet character [a-zA-Z] and the flag value is equal to
# 1, then change this character to upper case.
# If it is an alphabet character [a-zA-Z] and the flag value is equal to
# 0, then change this character to lower case.
# Otherwise, if it is not an alphabet character, then set the flag value
# to 1.
# If the current char is an alphabet character, do a boolean not operation
# to the flag.
# After the iteration has done, return the fixed string that might have
# been changed in such iteration.

def uglify_word(s):
    rez = []
    count = 0
    for i in s:
        if i.isalpha() and count%2==0:
            rez.append(i.upper())
            count += 1
        else:
            rez.append(i.lower())
            count = 0
            
    return ''.join(rez)
    
    


print(uglify_word("AAA"))               # "AaA"
print(uglify_word("AaA"))               # "AaA"
print(uglify_word("BbB"))               # "BbB"
print(uglify_word("aaa-bbb-ccc"))       # "AaA-BbB-CcC"
print(uglify_word("AaA-BbB-CcC"))       # "AaA-BbB-CcC"
print(uglify_word("eeee-ffff-gggg"))    # "EeEe-FfFf-GgGg"
print(uglify_word("EeEe-FfFf-GgGg"))    # "EeEe-FfFf-GgGg"
print(uglify_word("qwe123asdf456zxc"))  # "QwE123AsDf456ZxC"
