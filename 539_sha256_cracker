# This kata aims to show the vulnerabilities of hashing functions for short
# messages.
# When provided with a SHA-256 hash, return the value that was hashed. You
# are also given the characters that make the expected value, but in
# alphabetical order.
# The returned value is less than 10 characters long. Return nil for Ruby
# and Crystal, None for Python, null for for Java and Javascript when the
# hash cannot be cracked with the given characters.
# Example:
# Example arguments: '5694d08a2e53ffcae0c3103e5ad6f6076abd960eb1f8a5657
# 7040bc1028f702b', 'cdeo'
# Correct output: 'code'

from hashlib import sha256
from itertools import permutations

    
def sha256_cracker(hash_, chars):
    for i in permutations(chars, len(chars)):
        current = ''.join(i)
        if sha256(current.encode('utf-8')).hexdigest() == hash_:
            return current




print(sha256_cracker('b8c49d81cb795985c007d78379e98613a4dfc824381be472238dbd2f974e37ae', 'deGioOstu')) #'GoOutside'
print(sha256_cracker('f58262c8005bb64b8f99ec6083faf050c502d099d9929ae37ffed2fe1bb954fb', 'abc'))       # None
