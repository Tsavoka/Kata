# To participate in a prize draw each one gives his/her firstname.
# Each letter of a firstname has a value which is its rank in the English
# alphabet. A and a have rank 1, B and b rank 2 and so on.
# The length of the firstname is added to the sum of these ranks hence a
# number som.
# An array of random weights is linked to the firstnames and each som is
# multiplied by its corresponding weight to get what they call a winning
# number.
# Example:
# names: "COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH"
# weights: [1, 4, 4, 5, 2, 1]
# PauL -> som = length of firstname + 16 + 1 + 21 + 12 = 4 + 50 -> 54
# The *weight* associated with PauL is 2 so PauL's *winning number* is
# 54 * 2 = 108.
# Now one can sort the firstnames in decreasing order of the winning
# numbers. When two people have the same winning number sort them
# alphabetically by their firstnames.
# Task:
# parameters: st a string of firstnames, we an array of weights, n a rank
# return: the firstname of the participant whose rank is n (ranks are
# numbered from 1)
# Example:
# names: "COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH"
# weights: [1, 4, 4, 5, 2, 1]
# n: 4
# The function should return: "PauL"
# Notes:
# The weight array is at least as long as the number of names, it may be
# longer.
# If st is empty return "No participants".
# If n is greater than the number of participants then return "Not enough
# participants".
# See Examples Test Cases for more examples.

def rank(st, we, n):
    if len(st) == 0:
        return "No participants"
    st = [i for i in st.split(',')]
    if len(st) < n:
        return "Not enough participants"
    som = {}
    rez = []
    pers_rez = []
    for i in st:
        pers = len(i)
        pers += sum(ord(k)-96 for k in i.lower())
        pers *= we[st.index(i)]
        som.update([(i,pers)])
        pers_rez.append(pers)
    pers_rez = [k for k, v in som.items() if v == sorted(pers_rez)[::-1][n-1]]
    while len(rez) < n:
        rez.append(max(som, key=som.get))
        som.pop(max(som, key=som.get))
    if len(pers_rez) == 1:
        return rez[-1]
    if pers_rez[0] and pers_rez[1] in rez:
        return rez[-1]
    if rez[-1] == sorted(pers_rez)[0]:
        return rez[-1]
    else:
        return sorted(pers_rez)[0]


print(rank("Addison,Jayden,Sofia,Michael,Andrew,Lily,Benjamin",
           [4, 2, 1, 4, 3, 1, 2], 4))       # "Benjamin"
print(rank("Lagon,Lily", [1, 5], 2))        # "Lagon"
print(rank("Addison,Jayden,Sofia,Michael,Andrew,Lily,Benjamin",
           [4, 2, 1, 4, 3, 1, 2], 8))       # "Not enough participants"
print(rank("", [4, 2, 1, 4, 3, 1, 2], 6))   # "No participants"
print(rank("Elijah,Chloe,Elizabeth,Matthew,Natalie,Jayden",
           [1, 3, 5, 5, 3, 6], 2))          # "Matthew"
print(rank("Aubrey,Olivai,Abigail,Chloe,Andrew,Elizabeth",
           [3, 1, 4, 4, 3, 2], 4))          # "Abigail"
print(rank("William,Willaim,Olivia,Olivai,Lily,Lyli",
           [1, 1, 1, 1, 1, 1], 1))          # "Willaim"
print(rank("Addison,Jayden,James,Madison,Robert,Joshua,Isabella,Aiden,Noah,\
Natalie,Samantha,Olivai,Michael,Liam,Naoh,Elizabeth,Abigail,Avery,Willaim,\
Daniel,David",
           [4, 5, 1, 3, 5, 3, 4, 3, 3, 3, 5, 3, 1, 3, 5, 4, 5, 5, 3, 3, 3],
           10))                             # "Abigail"
