# An IPv4 address is a 32-bit number that identifies a device on the internet.
# While computers read and write IP addresses as a 32-bit number, we prefer
# to read them in dotted-decimal notation, which is basically the number
# split into 4 chunks of 8 bits, converted to decimal, and delmited by a dot.
# In this kata, you will create the function ipToNum that takes an ip address
# and converts it to a number, as well as the function numToIp that takes a
# number and converts it to an IP address string. Input will always be valid.
# Conversion Example
# //original IP address
# 192.168.1.1
# //breaks down into 4 binary octets
# 11000000 . 10101000 . 00000001 . 00000001
# //which are merged together (unsigned 32-bit binary)
# 11000000101010000000000100000001
# //and finally converted to base 10
# 3232235777
# Note that the binary octets are unsigned (so we can't have negative numbers).

def ip_to_num(ip):
    return int(''.join(bin(int(i))[2:].zfill(8) for i in ip.split('.')), 2)


def num_to_ip(num):
    num = [bin(num)[2:].zfill(32)[i:i+8] for i in range(0, 32, 8)]
    return '.'.join(str(int(i,2)) for i in num)




print(ip_to_num('192.168.1.1'))             # 3232235777
print(ip_to_num('10.0.0.0'))                # 167772160
print(ip_to_num('176.16.0.1'))              # 2953838593

print(num_to_ip(3232235777))                # '192.168.1.1'
print(num_to_ip(167772160))                 # '10.0.0.0'
print(num_to_ip(2953838593))                # '176.16.0.1'

print(num_to_ip(ip_to_num('192.168.1.1')))  # '192.168.1.1'
print(num_to_ip(ip_to_num('10.0.0.0')))     # '10.0.0.0'
print(num_to_ip(ip_to_num('176.16.0.1')))   # '176.16.0.1'
print(ip_to_num(num_to_ip(3232235777)))     # 3232235777
print(ip_to_num(num_to_ip(167772160)))      # 167772160
print(ip_to_num(num_to_ip(2953838593)))     # 2953838593
