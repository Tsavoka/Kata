# In esoteric language called Whitespace, numbers are represented in
# the following format:
# - first character represents the sign: [space] for plus, [tab] for minus;
# - characters after that and until [LF] are the binary representation
# of the integer: [space] for 0, [tab] for 1.
# - the integer MUST be terminated by [LF].

def whitespace_number(n):
    result = ''
    if n > 0:
        result += ' '
    if n < 0:
        result += '\t'
    number = bin(n)[2:]
    for i in number:
        if i == '0':
            result += ' '
        elif i == '1':
            result += '\t'
    result += '\n'
    return result



def unbleach(ws):
    return ws.replace(' ', '[space]').replace('\t', '[tab]').replace('\n', '[LF]')

print(unbleach(whitespace_number( 1)))  # unbleach(   " \t\n")
print(unbleach(whitespace_number( 0)))  # unbleach(     " \n")
print(unbleach(whitespace_number(-1)))  # unbleach(  "\t\t\n")
print(unbleach(whitespace_number( 2)))  # unbleach(  " \t \n")
print(unbleach(whitespace_number(-3)))  # unbleach("\t\t\t\n")
