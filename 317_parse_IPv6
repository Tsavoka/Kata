# As the title already told you, you have to parse a IPv6 hex string in a
# weird way. For each block in the string you have to parse its characters
# as if they were separate hexadecimal values, add them up, and join the
# results into a string.
# Here's an example of an IPv6 string:
# 1B1D:AF01:3847:F8C4:20E9:0111:DFEA:AAAA. And here's how you'd convert
# its first block to an integer: "1B1D" => 0x1 + 0xB + 0x1 + 0xD = 26.
# After all the blocks have been processed in the same way, the results
# should be joined together: "26" + "26" + "22" + "39" + "25" + "3" +
# "52" + "40" -> "262622392535240"
# Note: some character other than colon (:) may be used in the input
# string, but it is guaranteed that hexadecimal digits will never be
# used as separators.

def parse_IPv6(iPv6):
    rez = ''
    while iPv6:
        rez += str(sum(int(i,16) for i in iPv6[:4]))
        iPv6 = iPv6[5:]
    return rez




print(parse_IPv6("1234:5678:9ABC:D00F:1111:2222:3333:4445")) # "10264228481217"
print(parse_IPv6("5454:FBFD:9ABC:AAAA:FFFF:2222:FBDE:0101")) # "18544240608532"
print(parse_IPv6("0000:0000:0000:0000:0000:0000:0000:0000")) # "00000000"
print(parse_IPv6("FFFF:FFFF:BBBB:CCCC:1212:AABC:0000:1111")) # "6060444864304"
print(parse_IPv6("ACDD-0101-9ABC-AAAA-FFFF-2222-FBDE-ACCC")) # "48242406085346"
print(parse_IPv6("5454rFBFDr9ABCrAA0ArFAFFr2222rFBDEr0101")) # "18544230558532"
print(parse_IPv6("F234#5678#9ABC#D00F#1111#2222#3333#4485")) # "24264228481221"
