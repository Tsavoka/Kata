# You will have a list of rationals in the form
# lst = [ [numer_1, denom_1] , ... , [numer_n, denom_n] ]
# or
# lst = [ (numer_1, denom_1) , ... , (numer_n, denom_n) ]
# where all numbers are positive integers. You have to produce their sum N / D
# in an irreducible form: this means that N and D have only 1 as a common
# divisor.
# Return the result in the form:
# [N, D] in Ruby, Crystal, Python, Clojure, JS, CS, PHP, Julia, Pascal
# an integer in Ruby, Crystal, Elixir, Clojure, Python, JS, CS, PHP, R, Julia
# If the input list is empty, return
# nil/None/null/Nothing
# Example:
# [ [1, 2], [1, 3], [1, 4] ]  -->  [13, 12]
# 1/2  +  1/3  +  1/4     =      13/12

from fractions import Fraction


def sum_fracts(lst):
    if not lst:
        return None
    rez = sum(Fraction(*i) for i in lst)
    return rez if rez==int(rez) else list(map(int, str(rez).split('/')))




print(sum_fracts([[1, 2], [1, 3], [1, 4]]))     # [13, 12]
print(sum_fracts([[1, 3], [5, 3]]))             # 2
print(sum_fracts([[12, 3], [15, 3]]))           # 9
print(sum_fracts([[2, 7], [1, 3], [1, 12]]))    # [59, 84]
print(sum_fracts([]))                           # None
