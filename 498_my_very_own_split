# Quite recently it happened to me to join some recruitment interview,
# where my first task was to write own implementation of built-in split
# function. It's quite simple, is it not?
# However, there were the following conditions:
#  the function cannot use, in any way, the original split or rsplit
# functions,
#  the new function must be a generator,
#  it should behave as the built-in split, so it will be tested that way --
# think of split() and split('')
# This Kata will control if the new function is a generator and if it's not
# using the built-in split method, so you may try to hack it, but let me
# know if with success, or if something would go wrong!
# Enjoy!

from string import ascii_letters as al, punctuation

def my_very_own_split(string, delimiter = None):
    if delimiter == '':
        raise ValueError
    rez = []

    if delimiter == None:
        string = string.replace('\t', ' ')
        string += ' '
        while string:
            rez.append(string[0:string.index(' ')])
            string = string[string.index(' ')+1:]
            string = string.lstrip()

    else:
        new_delimiter = [i for i in al+punctuation if i not in string][0]
        string = string.replace(delimiter, new_delimiter)
        string += new_delimiter
        while string:
            rez.append(string[0:string.index(new_delimiter)])
            string = string[string.index(new_delimiter)+1:]
    return rez




s, d = 'abc,def,ghi', ','
print(list(my_very_own_split(s, d)))   # ['abc', 'def', 'ghi'])

s, d = 'This is a test', ' '
print(list(my_very_own_split(s, d)))   # ['This', 'is', 'a', 'test'])

s, d = 'This is a test', ','
print(list(my_very_own_split(s, d)))   # ['This is a test'])

s, d = 'abc,#def#,ghi,#jkl', ',#'
print(list(my_very_own_split(s, d)))   # ['abc', 'def#,ghi', 'jkl']

s, d = 'abc def ghi	jklmno				prrrr', None
print(list(my_very_own_split(s, d)))   # ['abc', 'def', 'ghi', 'jklmno', 'prrrr']
