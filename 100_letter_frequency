# Write a function that takes a piece of text in the form of a string
# and returns the letter frequency count for the text. This count
# excludes numbers, spaces and all punctuation marks. Upper and lower
# case versions of a character are equivalent and the result should all
# be in lowercase.
# The function should return a list of tuples (in Python and Haskell) or
# arrays (in other languages) sorted by the most frequent letters first.
# The Rust implementation should return an ordered BTreeMap. Letters with
# the same frequency are ordered alphabetically.

import re


def letter_frequency(text):    
    text = ''.join(re.findall(r'[a-z]', text.lower()))
    dict_text = {i: text.count(i) for i in text}
    list_dt = sorted(list(dict_text.items()))[::-1]
    return sorted(list_dt, key=lambda i: i[1])[::-1]




print(letter_frequency("As long as I'm learning something, I figure I'm OK - it's a decent day."))
# [('i', 7), ('a', 5), ('e', 5), ('n', 5), ('g', 4), ('s', 4), ('m', 3), ('o', 3), ('t', 3), ('d', 2), ('l', 2), ('r', 2), ('c', 1), ('f', 1), ('h', 1), ('k', 1), ('u', 1), ('y', 1)]
print(letter_frequency('IWT LDGAS XH HIXAA P LTXGS EAPRT, STHEXIT BN TUUDGIH ID BPZT RATPG PCS ETGUTRI HTCHT DU XI.'))
#[('t', 12), ('i', 7), ('h', 6), ('a', 5), ('g', 5), ('p', 5), ('x', 5), ('d', 4), ('s', 4), ('u', 4), ('e', 3), ('r', 3), ('b', 2), ('c', 2), ('l', 2), ('n', 1), ('w', 1), ('z', 1)]
