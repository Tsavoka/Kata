# Write a function that takes a string of braces, and determines if the
# order of the braces is valid. It should return true if the string is
# valid, and false if it's invalid.
# This Kata is similar to the Valid Parentheses Kata, but introduces new
# characters: brackets [], and curly braces {}.
# All input strings will be nonempty, and will only consist of parentheses,
# brackets and curly braces: ()[]{}.
# What is considered Valid?
# A string of braces is considered valid if all braces are matched with the
# correct brace.
# Examples
# "(){}[]"   =>  True
# "([{}])"   =>  True
# "(}"       =>  False
# "[(])"     =>  False

from collections import deque


def valid_braces(string):
    braces = deque()
    for i in string:
        if i in '([{':
            braces.append(i)
        else:
            if len(braces) == 0:
                return False
            elif i == ')' and braces[-1] == '(':
                braces.pop()
            elif i == ']' and braces[-1] == '[':
                braces.pop()
            elif i == '}' and braces[-1] == '{':
                braces.pop()
    return not braces            
                
            
    

print(valid_braces( "()" ))                # True
print(valid_braces( "(}" ))                # False
print(valid_braces( "[]" ))                # True
print(valid_braces("[(])"))                # False
print(valid_braces( "{}" ))                # True
print(valid_braces( "{}()[]" ))            # True
print(valid_braces( "([{}])" ))            # True
print(valid_braces( "([}{])" ))            # False
print(valid_braces( "{}({})[]" ))          # True
print(valid_braces( "(({{[[]]}}))" ))      # True
print(valid_braces( "(((({{" ))            # False
print(valid_braces( ")(}{][" ))            # False
print(valid_braces( "())({}}{()][][" ))    # False
