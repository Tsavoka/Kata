# Your task is to write such a run-length encoding. For a given string,
# return a list (or array) of pairs (or arrays) [ (i1, s1), (i2, s2), â€¦,
# (in, sn) ], such that one can reconstruct the original string by
# replicating the character sx ix times and concatening all those strings.
# Your run-length encoding should be minimal, ie. for all i the values si
# and si+1 should differ.
# Examples
# As the article states, RLE is a very simple form of data compression.
# It's only suitable for runs of data, as one can see in the following
# example:
# run_length_encoding("hello world!")
#  //=>      [[1,'h'], [1,'e'], [2,'l'], [1,'o'], [1,' '], [1,'w'], [1,'o'],
# [1,'r'], [1,'l'], [1,'d'], [1,'!']]
# It's very effective if the same data value occurs in many consecutive data
# elements:
# run_length_encoding("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb")
# => [[34,'a'], [3,'b']]

def run_length_encoding(s):
    first, seq = list(s[:1]), s[1:]
    rez = [first] if first else []
    for i in seq:
        if i in first:
            first.append(i)
        else:
            first = [i]
            rez.append(first)
    return [[len(i), i[0]] for i in rez]




print(run_length_encoding(''))
# []
print(run_length_encoding("abc"))
# [[1,'a'], [1,'b'], [1,'c']]
print(run_length_encoding("aab"))
# [[2,'a'], [1,'b']]
print(run_length_encoding("hello world!"))
# [[1,'h'], [1,'e'], [2,'l'], [1,'o'], [1,' '], [1,'w'], [1,'o'], [1,'r'],
# [1,'l'], [1,'d'], [1,'!']]
print(run_length_encoding("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb"))
# [[34,'a'], [3,'b']]
print(run_length_encoding("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW"))
# [[12,'W'], [1,'B'], [12,'W'], [3,'B'], [24,'W'], [1,'B'], [14,'W']]
