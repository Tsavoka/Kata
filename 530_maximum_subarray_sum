# The maximum sum subarray problem consists in finding the maximum sum of
# a contiguous subsequence in an array or list of integers:
# max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
# should be 6: [4, -1, 2, 1]
# Easy case is when the list is made up of only positive numbers and the
# maximum sum is the sum of the whole array. If the list is made up of only
# negative numbers, return 0 instead.
# Empty list is considered to have zero greatest sum. Note that the empty
# list or array is also a valid sublist/subarray.

def max_sequence(arr):
    rez = 0
    start = 0
    for i in arr:
        start += i
        if start < 0:
            start = 0            
        else:
            rez = max(rez,start)
    return rez


    

print(max_sequence([]))                                         # 0
print(max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4]))            # 6
print(max_sequence([-2, -1, -3, -4, -1, -2, -1, -5, -4]))       # 0
print(max_sequence([7, 4, 11, -11, 39, 36, 10, -6, 37, -10, -32, 44, -26,
                    -34, 43, 43]))                              # 155
print(max_sequence([11, 9, 2, -7, -4, 19, -15, -1, -5, 19, 8])) # 36
print(max_sequence([-10, -16, 11, -1, -17, -1, -17, 6, -7, -17, 6, -6, 11,
                    17, 17, 14, 0, -20, 11, -11]))              # 59
print(max_sequence([-18, 2, 5, 16, -8, 15, -11, -7, -13, 11]))  # 30
print(max_sequence([-7, -10, 7, 5, 20, -18, 8, 2, -7, 7, -6]))  # 32
