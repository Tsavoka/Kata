# In this task, you need to restore a string from a list of its copies.
# You will receive an array of strings. All of them are supposed to be
# the same as the original but, unfortunately, they were corrupted which
# means some of the characters were replaced with asterisks ("*").
# You have to restore the original string based on non-corrupted
# information you have. If in some cases it is not possible to determine
# what the original character was, use "#" character as a special marker
# for that.
# If the array is empty, then return an empty string.
# Examples:
# input = ["a*cde", "*bcde", "abc*e"]
# result = "abcde"

def assemble(arr):
    if not arr:
        return ''
    arr = [i.replace('*', '#') for i in arr]
    rez = ''
    for count in range(len(arr[0])):
        word = [i[count] for i in arr]
        if word.count('#') == len(word):
            rez += '#'
        for i in word:
            if i != '#':
                rez += i
                break            
    return  rez




print(assemble(['H*llo, W*rld!', 'Hel*o, *or*d!', '*ello* World*']))
# 'Hello, World!'
print(assemble(['.** . ." ."" ! ! .', '. . . ." **" ! * .',
                '* . .*.* ."" * ! .', '. . .*." .**** ! .',
                '**. * .* .*" ! ! .']))
# '. . . ." ."" ! ! .'
print(assemble(['. . . .', '. . . .', '. . . .', '. . . .', '. . . .']))
# '. . . .'
print(assemble(['12***6789', '**3456789', '12345**8*', '***456**9',
                '1*3*5*7*9', '*2*456789']))
# '123456789'
print(assemble(['******', '******', '******', '******']))
# '######'
print(assemble(['*#*#*#*#*#*#*#*', '*#*#*#*#*#*#*#*',
                '*#*#*#*#*#*#*#*', '*#*#*#*#*#*#*#*']))
# '###############'
print(assemble([]))
# ''
