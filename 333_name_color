# Make a function that takes in a name (Any string two chars or longer
# really, but the name is the idea) and use the ascii values of it's
# substrings to produce the hex value of its color! Here is how it's
# going to work:
# The first two hexadecimal digits are the SUM of the value of characters
# (modulo 256).
# The second two are the PRODUCT of all the characters (again, modulo
# 256, which is one more than FF in hexadecimal).
# The last two are the ABSOLUTE VALUE of the DIFFERENCE between the first
# letter, and the sum of every other letter. (I think you get the idea
# with the modulo thing).
# For example "Jack" returns "79CAE5", which is... baby blue!
# "Jack"  #  "J" = 74, "a" = 97, "c" = 99, "k" = 107
# 74 + 97 + 99 + 107 = 377                  -->  mod 256 = 121  -->  hex: 79
# 74 * 97 * 99 * 107 = 76036554             -->  mod 256 = 202  -->  hex: CA
# 74 - (97 + 99 + 107) = -229  --> abs: 229 -->  mod 256 = 229  -->  hex: E5
# NOTE: The function should return None/nil when the input is less than
# two chars.

from functools import reduce


def string_color(name):
    if len(name) < 2:
        return None
    name = [ord(i) for i in name]
    first = hex(sum(name)%256)[2:].zfill(2)
    second = hex(reduce(lambda x,y: x*y, name)%256)[2:].zfill(2)
    third = hex(abs(name[0] - sum(name[1:]))%256)[2:].zfill(2)
    return (first+second+third).upper()




print(string_color("Jack"))         # "79CAE5"
print(string_color("John Doe"))     # "C70033"
print(string_color("CodeWars"))     # "182892"
print(string_color("X"))            # None
