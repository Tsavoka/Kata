# When working with color values it can sometimes be useful to extract the individual red, green, and blue (RGB) 
# component values for a color. Implement a function that meets these requirements:
# Accepts a case-insensitive hexadecimal color string as its parameter (ex. "#FF9933" or "#ff9933")
# Returns a Map<String, int> with the structure {r: 255, g: 153, b: 51} where r, g, and b range from 0 through 255
# Note: your implementation does not need to support the shorthand form of hexadecimal notation (ie "#FFF")
# Example
# "#FF9933" --> {r: 255, g: 153, b: 51}


def hex_string_to_RGB(hex_string):
    return dict(zip(['r', 'g', 'b'], [int(hex_string.lower()[i:i+2], 16) for i in range(1, len(hex_string), 2)]))




print(hex_string_to_RGB("#FF9933")) # {'r': 255, 'g': 153, 'b': 51}
print(hex_string_to_RGB("#beaded")) # {'r': 190, 'g': 173, 'b': 237}
print(hex_string_to_RGB("#000000")) # {'r': 0, 'g': 0, 'b': 0}
print(hex_string_to_RGB("#111111")) # {'r': 17, 'g': 17, 'b': 17}
print(hex_string_to_RGB("#Fa3456")) # {'r': 250, 'g': 52, 'b': 86}
