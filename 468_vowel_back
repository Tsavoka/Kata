# You need to play around with the provided string (s).
# Move consonants forward 9 places through the alphabet. If they pass 'z',
# start again at 'a'.
# Move vowels back 5 places through the alphabet. If they pass 'a', start
# again at 'z'. For our Polish friends this kata does not count 'y' as a
# vowel.
# Exceptions:
# If the character is 'c' or 'o', move it back 1 place. For 'd' move it
# back 3, and for 'e', move it back 4.
# If a moved letter becomes 'c', 'o', 'd' or 'e', revert it back to it's
# original value.
# Provided string will always be lower case, won't be empty and will have
# no special characters.

def vowel_back(st):
    rez = ''
    for i in st:
        if i in 'co':
            rez += chr(97+(ord(i)-98)%26)
        elif i == 'd':
            rez += chr(97+(ord(i)-100)%26)
        elif i == 'e':
            rez += chr(97+(ord(i)-101)%26)
        elif i not in 'aiu':
            new_i = chr(97+(ord(i)-97+9)%26)
            if new_i in 'code':
                rez += i
            else:
                rez += new_i
        elif i in 'aiu':
            new_i = chr(97+(ord(i)-97-5)%26)
            if new_i in 'code':
                rez += i
            else:
                rez += new_i            
    return rez




print(vowel_back("testcase"))           # "tabtbvba"
print(vowel_back("codewars"))           # "bnaafvab"
print(vowel_back("exampletesthere"))    # "agvvyuatabtqaaa"
