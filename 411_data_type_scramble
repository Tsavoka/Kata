# Oh no! Someone left the server at your local car dealership too close to
# a blender and now all of their data is scrambled.
# It is your job to unscramble the data and put it into an easy to read
# dictionary.
# Unscramble the list you are given and return the values in a dictionary
# such as the following:
# dictionary = {'make': make, 'model': model, 'year': year, 'new': new}
# You will be given a list containing a string (the make of the car), a
# tuple containing two strings (the model and sub-model), an integer
# (the year the car was manufactured) and a boolean (whether the car is new
# or used 'True' or 'False'), but you will not know the order of the list.
# Return the dictionary where 'make' is a String, 'model' is a String,
# 'year' is an integer, and 'new' is a boolean of whether it is new (True)
# or used (False)
# P.S Model should be converted to a string, separating the values by one
# Space

def make_model_year(lst):
    return {'make': [i for i in lst if type(i) == str][0],
            'model': [' '.join(i) for i in lst if type(i) == tuple][0],
            'year': [i for i in lst if type(i) == int][0],
            'new': [i for i in lst if type(i) == bool][0]}




print(make_model_year([1998, 'ford', ('mustang', 'gt'), False]))
# {'make': 'ford', 'model': 'mustang gt', 'year': 1998, 'new': False}
print(make_model_year(['benz', ('motorwagen', 'basic'), False, 1886]))
# {'make': 'benz', 'model': 'motorwagen basic', 'year': 1886, 'new': False}
print(make_model_year([('camry', 'basic'), True, 2020, 'toyo']))
# {'make': 'toyo', 'model': 'camry basic', 'year': 2020, 'new': True}
