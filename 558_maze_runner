# Welcome Adventurer. Your aim is to navigate the maze and reach the finish point 
# without touching any walls. Doing so will kill you instantly!
# Task
# You will be given a 2D array of the maze and an array of directions. Your task 
# is to follow the directions given. If you reach the end point before all your 
# moves have gone, you should return Finish. If you hit any walls or go outside 
# the maze border, you should return Dead. If you find yourself still in the maze
# after using all the moves, you should return Lost.
# The Maze array will look like
# maze = [[1,1,1,1,1,1,1],
#         [1,0,0,0,0,0,3],
#         [1,0,1,0,1,0,1],
#         [0,0,1,0,0,0,1],
#         [1,0,1,0,1,0,1],
#        [1,0,0,0,0,0,1],
#         [1,2,1,0,1,0,1]]
# ..with the following key
# 0 = Safe place to walk
#       1 = Wall
#       2 = Start Point
#       3 = Finish Point
#  direction = ["N","N","N","N","N","E","E","E","E","E"] == "Finish"
# Rules
# 1. The Maze array will always be square i.e. N x N but its size and content will
# alter from test to test.
# 2. The start and finish positions will change for the final tests.
# 3. The directions array will always be in upper case and will be in the format of 
# N = North, E = East, W = West and S = South.
# 4. If you reach the end point before all your moves have gone, you should return
# Finish.
# 5. If you hit any walls or go outside the maze border, you should return Dead.
# 6. If you find yourself still in the maze after using all the moves, you should 
# return Lost.


def maze_runner(maze, directions):
    ypos = [i for i, k in enumerate(maze) if 2 in k][0]
    xpos = [i for i, k in enumerate(maze[ypos]) if k == 2][0]
    for i in directions:
        if i == 'N':
            ypos -= 1
        elif i == 'E':
            xpos += 1
        elif i == 'W':
            xpos -= 1
        elif i == 'S':
            ypos += 1
        try:
            if maze[ypos][xpos] == 1 or xpos<0 or ypos<0:
                return 'Dead'
            if maze[ypos][xpos] == 3:
                return 'Finish'
        except:
            return 'Dead'
    return 'Lost'




def example_tests():
    maze = [[1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 3],
            [1, 0, 1, 0, 1, 0, 1],
            [0, 0, 1, 0, 0, 0, 1],
            [1, 0, 1, 0, 1, 0, 1],
            [1, 0, 0, 0, 0, 0, 1],
            [1, 2, 1, 0, 1, 0, 1]]

    print(maze_runner(maze, ["N", "N", "N", "N", "N", "E", "E", "E", "E", "E"]), "Finish")
    print(maze_runner(maze, ["N", "N", "N", "N", "N", "E", "E", "S", "S", "E", "E", "N", "N", "E"]),
          "Finish")
    print(maze_runner(maze, ["N", "N", "N", "N", "N", "E", "E", "E", "E", "E", "W", "W"]), "Finish")
    print(maze_runner(maze, ["N", "N", "N", "W", "W"]), "Dead")
    print(maze_runner(maze, ["N", "N", "N", "N", "N", "E", "E", "S", "S", "S", "S", "S", "S"]), "Dead")
    print(maze_runner(maze, ["N", "E", "E", "E", "E"]), "Lost")

    maze = [[1, 0, 0, 0, 0],
            [0, 0, 0, 1, 0],
            [0, 0, 2, 0, 0],
            [0, 0, 0, 0, 0],
            [3, 0, 0, 0, 0]]
    print(maze_runner(maze, ['S', 'S', 'N', 'W', 'S', 'W', 'W', 'S', 'E', 'E', 'W', 'E', 'S', 'S', 'W']), "Finish")

    maze = [[1, 3, 0, 0, 0, 0, 0],
            [1, 1, 0, 0, 0, 0, 1],
            [0, 0, 0, 2, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1],
            [0, 1, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0]]
    print(maze_runner(maze, ['E', 'N', 'E', 'W', 'S', 'W', 'W', 'E', 'E', 'S', 'S', 'E', 'N', 'E', 'W', 'W', 'E',
                             'S', 'N', 'N', 'N', 'W', 'W', 'W', 'N', 'E', 'S', 'N', 'E', 'S', 'N', 'N']), "Dead")


example_tests()
