# The input is a string str of digits. Cut the string into chunks (a chunk
# here is a substring of the initial string) of size sz (ignore the last
# chunk if its size is less than sz).
# If a chunk represents an integer such as the sum of the cubes of its digits
# is divisible by 2, reverse that chunk; otherwise rotate it to the left by
# one position. Put together these modified chunks and return the result as
# a string.
# If
# - sz is <= 0 or if str is empty return ""
# - sz is greater (>) than the length of str it is impossible to take a chunk
# of size sz hence return "".
# Examples:
# revrot("123456987654", 6) --> "234561876549"
# revrot("123456987653", 6) --> "234561356789"
# revrot("66443875", 4) --> "44668753"
# revrot("66443875", 8) --> "64438756"
# revrot("664438769", 8) --> "67834466"

def rev_rot(strng, sz):
    if sz == 0:
        return ''
    s = [strng[i:i+sz] for i in range(0, len(strng), sz) if len(strng[i:i+sz])==sz]
    return ''.join(i[1:]+i[0] if sum(map(int, i))%2!=0 else i[::-1] for i in s)




print(rev_rot("1234", 0))       # ""
print(rev_rot("", 0))           # ""
print(rev_rot("1234", 5))       # ""
s = "733049910872815764"
print(rev_rot(s, 5))            # "330479108928157"
print(rev_rot("66443875", 4))   # "44668753"
