# Given an m x n 2D binary grid grid which represents a map of '1's 
# (land) and '0's (water), return the number of islands.
# An island is surrounded by water and is formed by connecting adjacent 
# lands horizontally or vertically. You may assume all four edges of 
# the grid are all surrounded by water.
# Example 1:
# Input: grid = [
#   ["1","1","1","1","0"],
#   ["1","1","0","1","0"],
#   ["1","1","0","0","0"],
#   ["0","0","0","0","0"]
# ]
# Output: 1
# Example 2:
# Input: grid = [
#   ["1","1","0","0","0"],
#   ["1","1","0","0","0"],
#   ["0","0","1","0","0"],
#   ["0","0","0","1","1"]
# ]
# Output: 3
# Constraints:
# m == grid.length
# n == grid[i].length
# 1 <= m, n <= 300
# grid[i][j] is '0' or '1'.

from collections import deque


class Solution:
    def numIslands(self, grid):
        queue = deque([])
        counter = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    grid[i][j] = '0'
                    queue.append((i,j))
                    self.island(grid, queue)
                    counter += 1
        return counter
        
    def island(self, grid, queue):
        while queue:
            ni,nj = queue.popleft()
            for i,j in [ni-1,nj], [ni,nj-1], [ni+1, nj], [ni,nj+1]:
                if 0<=i<len(grid) and 0<=j<len(grid[0]) and grid[i][j] == '1':
                    queue.append((i,j))
                    grid[i][j] = '0'




s = Solution()
print(s.numIslands([["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]])) # 1
print(s.numIslands([["1","1","0","0","0"],["1","1","0","0","0"],["0","0","1","0","0"],["0","0","0","1","1"]])) # 3
