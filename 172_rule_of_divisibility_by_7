# A number m of the form 10x + y is divisible by 7 if and only if x − 2y
# is divisible by 7. In other words, subtract twice the last digit from
# the number formed by the remaining digits. Continue to do this until a
# number known to be divisible or not by 7 is obtained; you can stop when
# this number has at most 2 digits because you are supposed to know if a
# number of at most 2 digits is divisible by 7 or not.
# The original number is divisible by 7 if and only if the last number
# obtained using this procedure is divisible by 7.
# Examples:
# 1 - m = 371 -> 37 − (2×1) -> 37 − 2 = 35 ; thus, since 35 is divisible
# by 7, 371 is divisible by 7.
# Task:
# Your task is to return to the function seven(m) (m integer >= 0) an
# array (or a pair, depending on the language) of numbers, the first
# being the last number m with at most 2 digits obtained by your function
# (this last m will be divisible or not by 7), the second one being the
# number of steps to get the result.
# Return on the stack number-of-steps, last-number-m-with-at-most-2-digits

def seven(m):
    counter = 0
    while len(str(m)) > 2:
        m = int(str(m)[0:-1]) - 2 * int(str(m)[-1])
        counter += 1
    return (m, counter)




print(seven(1603))      # (7, 2)
print(seven(371))       # (35, 1)
print(seven(483))       # (42, 1)
print(seven(1021))      # (10, 2)
